{smcl}
{txt}{sf}{ul off}

{com}. /** 
>  * A do file to run the standard stats for a whole data set. 
>  *
>  * Note that you must delete the files in the derived directory
>  * for changes to be reflected in the output.
>  *
>  * @version 0.1
> */
. 
. // profiler on
. 
. cap noi {c -(}
. 
. import delimited  "/Users/mas/Dropbox/National_Pride_Large_Data/Data/EVC_data/OECD data/Population/Population profile_full data/Historical_pop_and_projections1950_2050/POP_PROJ_Data_1950_2050.csv"
{res}{text}(10 vars, 467871 obs){com}. 
. describe, short

{txt}Contains data
  obs:{res}       467,871                          
{txt} vars:{res}            10                          
{txt} size:{res}    54,740,907                          
{txt}Sorted by:  
{res}     Note:  dataset has changed since last saved
{com}. 
. local N = r(N)
. local variables = r(k)
. 
. di "@N `N'"
{res}@N 467871
{com}. di "@variables `variables'"
{res}@variables 10
{com}. 
. datasignature
  {res}467871:10(70744):1103902494:3623752822
{com}. local datasig = "`r(datasignature)'"
. 
. di "@datasignature `datasig'"
{res}@datasignature 467871:10(70744):1103902494:3623752822
{com}. 
. cap noi xtset
{err}panel variable not set; use {bf:xtset} {it:varname} ...
{com}. if ( !_rc ) {c -(}
.     di "@timevar `r(timevar)'"
.     di "@panelvar `r(panelvar)'"
. {c )-}
. 
. notes _dta
{res}{com}. 
. qui {c -(}
{res}@_subsample 100000
{com}. 
. foreach var of varlist * {c -(}
{txt}  2{com}. 
. di "=====`var'====="
{txt}  3{com}. qui {c -(}
{txt}  4{com}. local category_cutoff = 30
{txt}  5{com}. 
. // this takes very long on large datasets (and does mostly the same as other things below)
. // codebook `var'
. 
. local isstr = ""
{txt}  6{com}. local unique = ""
{txt}  7{com}. local total = ""
{txt}  8{com}. local class = ""
{txt}  9{com}. 
. local type : type `var' 
{txt} 10{com}. local label : variable label `var' 
{txt} 11{com}. 
. local class = "other"
{txt} 12{com}. 
. // test for string
. capture confirm string variable `var'
{txt} 13{com}. if ( !_rc ) {c -(}
{txt} 14{com}.     // we now it is a string
.     local isstr = "YES"
{txt} 15{com}.     capture tab `var', matcell( freq )
{txt} 16{com}.     if ( !_rc ) {c -(}
{txt} 17{com}.     
.         // not too many obs
.         local total = `r(N)'
{txt} 18{com}.         local unique = r(r)
{txt} 19{com}. 
.         if ( `unique' < `category_cutoff' ) {c -(}
{txt} 20{com}.         forvalues i=1/`unique' {c -(}
{txt} 21{com}.             if ( `i' == 1 ) {c -(}
{txt} 22{com}.                 noi di "@freq " _continue
{txt} 23{com}.             {c )-}
{txt} 24{com}.             noi di freq[`i',1] _continue
{txt} 25{com}.             if ( `i' == `unique' ) {c -(}
{txt} 26{com}.                 noi di ""
{txt} 27{com}.             {c )-}
{txt} 28{com}.             else {c -(}
{txt} 29{com}.                 noi di ", " _continue
{txt} 30{com}.             {c )-}
{txt} 31{com}.         {c )-}
{txt} 32{com}. 
.         levelsof `var', local(levels)
{txt} 33{com}.         local i = 1
{txt} 34{com}.         foreach l of local levels {c -(}
{txt} 35{com}.             if ( `i' == 1 ) {c -(}
{txt} 36{com}.                 noi di "@values " _continue
{txt} 37{com}.             {c )-}
{txt} 38{com}.             noi di `""`l'""' _continue
{txt} 39{com}.             if ( `i' == `unique' ) {c -(}
{txt} 40{com}.                 noi di ""
{txt} 41{com}.             {c )-}
{txt} 42{com}.             else {c -(}
{txt} 43{com}.                 noi di ", " _continue
{txt} 44{com}.             {c )-}
{txt} 45{com}.             local i = `i' + 1
{txt} 46{com}.         {c )-}
{txt} 47{com}.         {c )-}
{txt} 48{com}.         
.         if ( `total' == 0 ) {c -(}
{txt} 49{com}.             local class = "empty"
{txt} 50{com}.         {c )-}
{txt} 51{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 52{com}.             local class = "constant"
{txt} 53{com}.         {c )-}
{txt} 54{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 55{com}.             local class = "dummy"
{txt} 56{com}.         {c )-}
{txt} 57{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 58{com}.             local class = "category"
{txt} 59{com}.         {c )-}
{txt} 60{com}.         else if (`unique' == `total') {c -(}
{txt} 61{com}.             local class = "identifier"
{txt} 62{com}.         {c )-} 
{txt} 63{com}.         else {c -(}
{txt} 64{com}.             local class = "string"
{txt} 65{com}.         {c )-}        
{txt} 66{com}.     {c )-}
{txt} 67{com}.     else {c -(}
{txt} 68{com}.         // lots of observations, not sure what to do yet
.         // should get random samples here
.         noi di "@example0 " `var'[1]
{txt} 69{com}.     {c )-}
{txt} 70{com}. {c )-}
{txt} 71{com}. else {c -(}
{txt} 72{com}.     // else assume it is numeric
. 
.     noi inspect `var'
{txt} 73{com}. 
.     local total = r(N)
{txt} 74{com}.     local unique = r(N_unique)
{txt} 75{com}. 
.     if ( `unique' < `category_cutoff' ) {c -(}
{txt} 76{com}.         local cat = "YES"
{txt} 77{com}.     {c )-}
{txt} 78{com}. 
.     if ( "`unique'" != "." ) {c -(}
{txt} 79{com}.         if ( `total' == 0 ) {c -(}
{txt} 80{com}.             local class = "empty"
{txt} 81{com}.         {c )-}
{txt} 82{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 83{com}.             local class = "constant"
{txt} 84{com}.         {c )-}
{txt} 85{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 86{com}.             local class = "dummy"
{txt} 87{com}.         {c )-}
{txt} 88{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 89{com}.             capture confirm string variable `var'
{txt} 90{com}.             if ( !_rc ) {c -(}
{txt} 91{com}.                 local class = "other"
{txt} 92{com}.             {c )-} 
{txt} 93{com}.             else {c -(}
{txt} 94{com}.                 local class = "category"
{txt} 95{com}.             {c )-}
{txt} 96{com}.         {c )-}
{txt} 97{com}.         else if (`r(N_unique)' == `r(N)') {c -(}
{txt} 98{com}.             local class = "identifier"
{txt} 99{com}.         {c )-}
{txt}100{com}.     {c )-}
{txt}101{com}. 
. // TODO this takes too long?   sum `var', detail
.     noi sum `var'
{txt}102{com}.     local min = r(min)
{txt}103{com}.     local max = r(max)
{txt}104{com}.     local nobs = r(N)
{txt}105{com}.     
.     // TODO maybe the precision should be handled later (vm?)
.     if ( ( "`type'" != "double" & "`type'" != "float" ) & "`class'" == "constant" ) {c -(}
{txt}106{com}.         noi di "@mean " %9.0f r(mean)
{txt}107{com}.     {c )-} 
{txt}108{com}.     else {c -(}
{txt}109{com}.         noi di "@mean " %9.3f r(mean)
{txt}110{com}.     {c )-}
{txt}111{com}.     noi di "@sd " %9.3f `r(sd)'
{txt}112{com}.     // noi di "@skewness " %9.3f `r(skewness)'
.     // noi di "@kurtosis " %9.3f `r(kurtosis)'
.     
.     if ( "`type'" == "double" | "`type'" == "float" ) {c -(}
{txt}113{com}.       noi di "@min " %9.3f `r(min)'
{txt}114{com}.       noi di "@max " %9.3f `r(max)'
{txt}115{com}.       // noi di "@p50 " %9.3f `r(p50)'
.     {c )-} 
{txt}116{com}.     else {c -(}
{txt}117{com}.       noi di "@min " %9.0f `r(min)'
{txt}118{com}.       noi di "@max " %9.0f `r(max)'
{txt}119{com}.       // noi di "@p50 " %9.0f `r(p50)'
.     {c )-}
{txt}120{com}. {c )-}
{txt}121{com}. 
. 
. if ( ( "`class'" == "constant" ) & ( "`isstr'"!= "YES" ) ) {c -(}
{txt}122{com}.     noi di "@values " `var'[1]
{txt}123{com}. {c )-}
{txt}124{com}. else if ( "`class'" == "category" | "`class'" == "dummy" ) {c -(}
{txt}125{com}.     cap noi {c -(}
{txt}126{com}.         if ( "`isstr'" != "YES" ) {c -(}
{txt}127{com}.             cap tab `var', matcell( freq ) matrow( name )
{txt}128{com}.             if ( _rc != 0 | ("`r(r)'" != "`unique'") ) {c -(}
{txt}129{com}.                 local class = "other"
{txt}130{com}.                 local unique = r(r)
{txt}131{com}.             {c )-}
{txt}132{com}.             else {c -(}
{txt}133{com}.                 forvalues i=1/`unique' {c -(}
{txt}134{com}.                     if ( `i' == 1 ) {c -(}
{txt}135{com}.                         noi di "@values " _continue
{txt}136{com}.                     {c )-}
{txt}137{com}.                     noi di name[`i',1] _continue
{txt}138{com}.                     if ( `i' == `unique' ) {c -(}
{txt}139{com}.                         noi di ""
{txt}140{com}.                     {c )-}
{txt}141{com}.                     else {c -(}
{txt}142{com}.                         noi di ", " _continue
{txt}143{com}.                     {c )-}
{txt}144{com}.                 {c )-}
{txt}145{com}.                 forvalues i=1/`unique' {c -(}
{txt}146{com}.                     if ( `i' == 1 ) {c -(}
{txt}147{com}.                         noi di "@names " _continue
{txt}148{com}.                     {c )-}
{txt}149{com}.                     local val = name[`i',1]
{txt}150{com}.                     local lab :label (`var') `val'
{txt}151{com}.                     noi di `""`lab'""' _continue
{txt}152{com}.                     if ( `i' == `unique' ) {c -(}
{txt}153{com}.                         noi di ""
{txt}154{com}.                     {c )-}
{txt}155{com}.                     else {c -(}
{txt}156{com}.                         noi di ", " _continue
{txt}157{com}.                     {c )-}
{txt}158{com}.                 {c )-}
{txt}159{com}.                 forvalues i=1/`unique' {c -(}
{txt}160{com}.                     if ( `i' == 1 ) {c -(}
{txt}161{com}.                         noi di "@freq " _continue
{txt}162{com}.                     {c )-}
{txt}163{com}.                     noi di freq[`i',1] _continue
{txt}164{com}.                     if ( `i' == `unique' ) {c -(}
{txt}165{com}.                         noi di ""
{txt}166{com}.                     {c )-}
{txt}167{com}.                     else {c -(}
{txt}168{com}.                         noi di ", " _continue
{txt}169{com}.                     {c )-}
{txt}170{com}.                 {c )-}
{txt}171{com}.             {c )-}
{txt}172{com}.         {c )-}
{txt}173{com}.     {c )-}
{txt}174{com}. {c )-}
{txt}175{com}. else {c -(}
{txt}176{com}.     noi di "@example0 " `var'[1]
{txt}177{com}. {c )-}
{txt}178{com}. 
. // histogram
. if ( "`isstr'" != "YES" & ("`class'" == "other" | "`class'" == "identifier") ) {c -(}
{txt}179{com}. cap noi {c -(}
{txt}180{com}.     tempvar h w
{txt}181{com}.     twoway__histogram_gen `var', gen( `h' `w' )
{txt}182{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}183{com}.         if ( `i' == 1 ) {c -(}
{txt}184{com}.             noi di "@histh " _continue
{txt}185{com}.         {c )-}
{txt}186{com}.         noi di `h'[`i'] _continue
{txt}187{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}188{com}.             noi di ""
{txt}189{com}.         {c )-}
{txt}190{com}.         else {c -(}
{txt}191{com}.             noi di ", " _continue
{txt}192{com}.         {c )-}
{txt}193{com}.     {c )-}
{txt}194{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}195{com}.         if ( `i' == 1 ) {c -(}
{txt}196{com}.             noi di "@histw " _continue
{txt}197{com}.         {c )-}
{txt}198{com}.         noi di `w'[`i'] _continue
{txt}199{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}200{com}.             noi di ""
{txt}201{com}.         {c )-}
{txt}202{com}.         else {c -(}
{txt}203{com}.             noi di ", " _continue
{txt}204{com}.         {c )-}
{txt}205{com}.     {c )-}
{txt}206{com}.     {c )-}
{txt}207{com}. {c )-}
{txt}208{com}. 
. noi di "@type `type'"
{txt}209{com}. noi di "@label `label'"
{txt}210{com}. noi di "@class `class'"
{txt}211{com}. noi di "@N_unique `unique'"
{txt}212{com}. noi di "@N `total'"
{txt}213{com}. 
. noi di as res " "
{txt}214{com}. noi di "_@NOTES"
{txt}215{com}. 
. noi notes `var'
{txt}216{com}. 
. noi di as res " "
{txt}217{com}. {c )-}
{txt}218{com}. 
. 
. {c )-}
=====country=====
@example0 Poland
@type str29
@label Country
@class string
@N_unique 50
@N 100000
{res} 
_@NOTES
 
=====sex=====
@freq 43743, 28267, 27990
@values "All persons", "Females", "Males"
@type str11
@label Sex
@class category
@N_unique 3
@N 100000
 
_@NOTES
 
=====variant=====
@freq 100000
@values "Baseline"
@example0 Baseline
@type str8
@label Variant
@class constant
@N_unique 1
@N 100000
 
_@NOTES
 
=====age=====
@example0 Population (hist&proj) < 20
@type str42
@label Age
@class string
@N_unique 40
@N 100000
 
_@NOTES
 
=====time=====

time:  Time                                     {txt}Number of Observations
{hline 11}                                 {hline 30}
                                            Total   Integers   Nonintegers
{c |}          {res}#                 {txt}Negative           {res}-         -          -
{txt}{c |}  {res}#   #   #   #             {txt}Zero               {res}-         -          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Positive       {res}100000     100000          -
{txt}{c |}  {res}#   #   #   #   #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#   #   #   #   #         {txt}Total          {res}100000     100000          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}1950               2060                     100000
(More than 99 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 8}time {c |}{res}    100000    2001.246    29.97301       1950       2060
@mean  2001.246
@sd    29.973
@min      1950
@max      2060
@example0 2001
@histh .01335, .00855909, .00855455, .00882273, .00877273, .01339091, .00876364, .00869545, .00873182, .00866818, .01350909, .00880455, .00861364, .00891364, .01286364, .00921818, .00903636, .00881364, .0086, .00892273, .01299545, .00870455, .00894545, .00883636, .0134, .00922727, .00901364, .00880455, .00915, .01334091, .00866818, .00910909, .00867273, .00858182, .00859545, .0126, .00859545, .00850455, .00857727, .00865, .01285, .00893182, .00882727, .00868182, .01337273, .00572727, .00215, .00211364, .00221818, .00309545
@histw 1951.1, 1953.3, 1955.5, 1957.7, 1959.9, 1962.1, 1964.3, 1966.5, 1968.7, 1970.9, 1973.1, 1975.3, 1977.5, 1979.7, 1981.9, 1984.1, 1986.3, 1988.5, 1990.7, 1992.9, 1995.1, 1997.3, 1999.5, 2001.7, 2003.9, 2006.1, 2008.3, 2010.5, 2012.7, 2014.9, 2017.1, 2019.3, 2021.5, 2023.7, 2025.9, 2028.1, 2030.3, 2032.5, 2034.7, 2036.9, 2039.1, 2041.3, 2043.5, 2045.7, 2047.9, 2050.1001, 2052.3, 2054.5, 2056.7, 2058.8999
@type int
@label Time
@class other
@N_unique .
@N 100000
 
_@NOTES
 
=====unitofmeasureused=====
@freq 15380, 84620
@values "Percentage", "Persons"
@type str10
@label Unit of measure used
@class dummy
@N_unique 2
@N 100000
 
_@NOTES
 
=====powercode=====
@freq 84620, 15380
@values "Thousands", "Units"
@type str9
@label Power code
@class dummy
@N_unique 2
@N 100000
 
_@NOTES
 
=====referenceperiod=====

referenceperiod:  Reference period              {txt}Number of Observations
{hline 34}          {hline 30}
                                            Total   Integers   Nonintegers
{c |}                            Negative           {res}-         -          -
{txt}{c |}                            Zero               {res}-         -          -
{txt}{c |}                            Positive           {res}-         -          -
{txt}{c |}                                           {hline 5}     {hline 5}      {hline 5}
{c |}                            Total              {res}-         -          -
{txt}{c |}                            Missing        {res}100000
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}.             -9.0e+307                     100000
   (0 unique value)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
referencep~d {c |}{res}         0
@mean         .
@sd 
@min 
@max 
@example0 .
@type byte
@label Reference period
@class empty
@N_unique 0
@N 0
 
_@NOTES
 
=====value=====

value:  Value                                   {txt}Number of Observations
{hline 13}                               {hline 30}
                                            Total   Integers   Nonintegers
{c |}  {res}#                         {txt}Negative           {res}-         -          -
{txt}{c |}  {res}#                         {txt}Zero           {res}   41        41          -
{txt}{c |}  {res}#                         {txt}Positive       {res}99959      7886      92073
{txt}{c |}  {res}#                                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#                         {txt}Total          {res}100000      7927      92073
{txt}{c |}  {res}#   .   .   .   .         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}0               9806530                     100000
(More than 99 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 7}value {c |}{res}    100000    26934.14    225196.4          0    9806530
@mean 26934.136
@sd  2.25e+05
@min     0.000
@max  9.81e+06
@example0 5371.8979
@histh 4.974e-06, 5.904e-08, 2.141e-08, 1.509e-08, 5.558e-09, 3.416e-09, 3.620e-09, 2.855e-09, 1.785e-09, 9.178e-10, 9.687e-10, 9.687e-10, 9.687e-10, 1.020e-09, 8.158e-10, 6.118e-10, 2.549e-10, 3.569e-10, 4.079e-10, 2.039e-10, 3.059e-10, 4.589e-10, 5.099e-10, 7.138e-10, 3.059e-10, 5.099e-10, 1.020e-10, 1.530e-10, 1.530e-10, 5.099e-11, 1.530e-10, 1.530e-10, 5.099e-11, 5.099e-11, 5.099e-11, 5.099e-11, 1.020e-10, 5.099e-11, 1.020e-10, 5.099e-11, 1.020e-10, 5.099e-11, 5.099e-11, 1.530e-10, 1.020e-10, 1.020e-10, 1.020e-10
@histw 98065.297, 294195.91, 490326.5, 686457.13, 882587.69, 1078718.3, 1274848.9, 1470979.5, 1667110.1, 1863240.8, 2059371.3, 2255502, 2451632.5, 2647763, 2843893.8, 3040024.3, 3236155, 3432285.5, 3628416, 3824546.8, 4020677.3, 4216808, 4412938.5, 4609069, 4805199.5, 5001330.5, 5197461, 5393591.5, 5589722, 5785852.5, 5981983.5, 6178114, 6374244.5, 6570375, 6766505.5, 7158767, 7354897.5, 7747158.5, 7943289.5, 8139420, 8335550.5, 8531681, 8727812, 9120073, 9316204, 9512334, 9708465
@type float
@label Value
@class other
@N_unique .
@N 100000
 
_@NOTES
 
=====flags=====
@freq 826, 226
@values "B", "E"
@type str1
@label Flags
@class dummy
@N_unique 2
@N 1052
 
_@NOTES
 
{com}. 
. // noi profiler report
. // profiler off
. {c )-}
{txt}
{com}. 
. exit, clear STATA
