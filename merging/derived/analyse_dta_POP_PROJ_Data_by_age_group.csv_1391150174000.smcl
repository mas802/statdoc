{smcl}
{txt}{sf}{ul off}

{com}. /** 
>  * A do file to run the standard stats for a whole data set. 
>  *
>  * Note that you must delete the files in the derived directory
>  * for changes to be reflected in the output.
>  *
>  * @version 0.1
> */
. 
. // profiler on
. 
. cap noi {c -(}
. 
. import delimited  "/Users/mas/Dropbox/National_Pride_Large_Data/Data/EVC_data/OECD data/Population/Population profile_by age group/POP_PROJ_Data_by_age_group.csv"
{res}{text}(7 vars, 188967 obs){com}. 
. describe, short

{txt}Contains data
  obs:{res}       188,967                          
{txt} vars:{res}             7                          
{txt} size:{res}    17,573,931                          
{txt}Sorted by:  
{res}     Note:  dataset has changed since last saved
{com}. 
. local N = r(N)
. local variables = r(k)
. 
. di "@N `N'"
{res}@N 188967
{com}. di "@variables `variables'"
{res}@variables 7
{com}. 
. datasignature
  {res}188967:7(73597):3726493254:2491389353
{com}. local datasig = "`r(datasignature)'"
. 
. di "@datasignature `datasig'"
{res}@datasignature 188967:7(73597):3726493254:2491389353
{com}. 
. cap noi xtset
{err}panel variable not set; use {bf:xtset} {it:varname} ...
{com}. if ( !_rc ) {c -(}
.     di "@timevar `r(timevar)'"
.     di "@panelvar `r(panelvar)'"
. {c )-}
. 
. notes _dta
{res}{com}. 
. qui {c -(}
{res}@_subsample 142857
{com}. 
. foreach var of varlist * {c -(}
{txt}  2{com}. 
. di "=====`var'====="
{txt}  3{com}. qui {c -(}
{txt}  4{com}. local category_cutoff = 30
{txt}  5{com}. 
. // this takes very long on large datasets (and does mostly the same as other things below)
. // codebook `var'
. 
. local isstr = ""
{txt}  6{com}. local unique = ""
{txt}  7{com}. local total = ""
{txt}  8{com}. local class = ""
{txt}  9{com}. 
. local type : type `var' 
{txt} 10{com}. local label : variable label `var' 
{txt} 11{com}. 
. local class = "other"
{txt} 12{com}. 
. // test for string
. capture confirm string variable `var'
{txt} 13{com}. if ( !_rc ) {c -(}
{txt} 14{com}.     // we now it is a string
.     local isstr = "YES"
{txt} 15{com}.     capture tab `var', matcell( freq )
{txt} 16{com}.     if ( !_rc ) {c -(}
{txt} 17{com}.     
.         // not too many obs
.         local total = `r(N)'
{txt} 18{com}.         local unique = r(r)
{txt} 19{com}. 
.         if ( `unique' < `category_cutoff' ) {c -(}
{txt} 20{com}.         forvalues i=1/`unique' {c -(}
{txt} 21{com}.             if ( `i' == 1 ) {c -(}
{txt} 22{com}.                 noi di "@freq " _continue
{txt} 23{com}.             {c )-}
{txt} 24{com}.             noi di freq[`i',1] _continue
{txt} 25{com}.             if ( `i' == `unique' ) {c -(}
{txt} 26{com}.                 noi di ""
{txt} 27{com}.             {c )-}
{txt} 28{com}.             else {c -(}
{txt} 29{com}.                 noi di ", " _continue
{txt} 30{com}.             {c )-}
{txt} 31{com}.         {c )-}
{txt} 32{com}. 
.         levelsof `var', local(levels)
{txt} 33{com}.         local i = 1
{txt} 34{com}.         foreach l of local levels {c -(}
{txt} 35{com}.             if ( `i' == 1 ) {c -(}
{txt} 36{com}.                 noi di "@values " _continue
{txt} 37{com}.             {c )-}
{txt} 38{com}.             noi di `""`l'""' _continue
{txt} 39{com}.             if ( `i' == `unique' ) {c -(}
{txt} 40{com}.                 noi di ""
{txt} 41{com}.             {c )-}
{txt} 42{com}.             else {c -(}
{txt} 43{com}.                 noi di ", " _continue
{txt} 44{com}.             {c )-}
{txt} 45{com}.             local i = `i' + 1
{txt} 46{com}.         {c )-}
{txt} 47{com}.         {c )-}
{txt} 48{com}.         
.         if ( `total' == 0 ) {c -(}
{txt} 49{com}.             local class = "empty"
{txt} 50{com}.         {c )-}
{txt} 51{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 52{com}.             local class = "constant"
{txt} 53{com}.         {c )-}
{txt} 54{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 55{com}.             local class = "dummy"
{txt} 56{com}.         {c )-}
{txt} 57{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 58{com}.             local class = "category"
{txt} 59{com}.         {c )-}
{txt} 60{com}.         else if (`unique' == `total') {c -(}
{txt} 61{com}.             local class = "identifier"
{txt} 62{com}.         {c )-} 
{txt} 63{com}.         else {c -(}
{txt} 64{com}.             local class = "string"
{txt} 65{com}.         {c )-}        
{txt} 66{com}.     {c )-}
{txt} 67{com}.     else {c -(}
{txt} 68{com}.         // lots of observations, not sure what to do yet
.         // should get random samples here
.         noi di "@example0 " `var'[1]
{txt} 69{com}.     {c )-}
{txt} 70{com}. {c )-}
{txt} 71{com}. else {c -(}
{txt} 72{com}.     // else assume it is numeric
. 
.     noi inspect `var'
{txt} 73{com}. 
.     local total = r(N)
{txt} 74{com}.     local unique = r(N_unique)
{txt} 75{com}. 
.     if ( `unique' < `category_cutoff' ) {c -(}
{txt} 76{com}.         local cat = "YES"
{txt} 77{com}.     {c )-}
{txt} 78{com}. 
.     if ( "`unique'" != "." ) {c -(}
{txt} 79{com}.         if ( `total' == 0 ) {c -(}
{txt} 80{com}.             local class = "empty"
{txt} 81{com}.         {c )-}
{txt} 82{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 83{com}.             local class = "constant"
{txt} 84{com}.         {c )-}
{txt} 85{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 86{com}.             local class = "dummy"
{txt} 87{com}.         {c )-}
{txt} 88{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 89{com}.             capture confirm string variable `var'
{txt} 90{com}.             if ( !_rc ) {c -(}
{txt} 91{com}.                 local class = "other"
{txt} 92{com}.             {c )-} 
{txt} 93{com}.             else {c -(}
{txt} 94{com}.                 local class = "category"
{txt} 95{com}.             {c )-}
{txt} 96{com}.         {c )-}
{txt} 97{com}.         else if (`r(N_unique)' == `r(N)') {c -(}
{txt} 98{com}.             local class = "identifier"
{txt} 99{com}.         {c )-}
{txt}100{com}.     {c )-}
{txt}101{com}. 
. // TODO this takes too long?   sum `var', detail
.     noi sum `var'
{txt}102{com}.     local min = r(min)
{txt}103{com}.     local max = r(max)
{txt}104{com}.     local nobs = r(N)
{txt}105{com}.     
.     // TODO maybe the precision should be handled later (vm?)
.     if ( ( "`type'" != "double" & "`type'" != "float" ) & "`class'" == "constant" ) {c -(}
{txt}106{com}.         noi di "@mean " %9.0f r(mean)
{txt}107{com}.     {c )-} 
{txt}108{com}.     else {c -(}
{txt}109{com}.         noi di "@mean " %9.3f r(mean)
{txt}110{com}.     {c )-}
{txt}111{com}.     noi di "@sd " %9.3f `r(sd)'
{txt}112{com}.     // noi di "@skewness " %9.3f `r(skewness)'
.     // noi di "@kurtosis " %9.3f `r(kurtosis)'
.     
.     if ( "`type'" == "double" | "`type'" == "float" ) {c -(}
{txt}113{com}.       noi di "@min " %9.3f `r(min)'
{txt}114{com}.       noi di "@max " %9.3f `r(max)'
{txt}115{com}.       // noi di "@p50 " %9.3f `r(p50)'
.     {c )-} 
{txt}116{com}.     else {c -(}
{txt}117{com}.       noi di "@min " %9.0f `r(min)'
{txt}118{com}.       noi di "@max " %9.0f `r(max)'
{txt}119{com}.       // noi di "@p50 " %9.0f `r(p50)'
.     {c )-}
{txt}120{com}. {c )-}
{txt}121{com}. 
. 
. if ( ( "`class'" == "constant" ) & ( "`isstr'"!= "YES" ) ) {c -(}
{txt}122{com}.     noi di "@values " `var'[1]
{txt}123{com}. {c )-}
{txt}124{com}. else if ( "`class'" == "category" | "`class'" == "dummy" ) {c -(}
{txt}125{com}.     cap noi {c -(}
{txt}126{com}.         if ( "`isstr'" != "YES" ) {c -(}
{txt}127{com}.             cap tab `var', matcell( freq ) matrow( name )
{txt}128{com}.             if ( _rc != 0 | ("`r(r)'" != "`unique'") ) {c -(}
{txt}129{com}.                 local class = "other"
{txt}130{com}.                 local unique = r(r)
{txt}131{com}.             {c )-}
{txt}132{com}.             else {c -(}
{txt}133{com}.                 forvalues i=1/`unique' {c -(}
{txt}134{com}.                     if ( `i' == 1 ) {c -(}
{txt}135{com}.                         noi di "@values " _continue
{txt}136{com}.                     {c )-}
{txt}137{com}.                     noi di name[`i',1] _continue
{txt}138{com}.                     if ( `i' == `unique' ) {c -(}
{txt}139{com}.                         noi di ""
{txt}140{com}.                     {c )-}
{txt}141{com}.                     else {c -(}
{txt}142{com}.                         noi di ", " _continue
{txt}143{com}.                     {c )-}
{txt}144{com}.                 {c )-}
{txt}145{com}.                 forvalues i=1/`unique' {c -(}
{txt}146{com}.                     if ( `i' == 1 ) {c -(}
{txt}147{com}.                         noi di "@names " _continue
{txt}148{com}.                     {c )-}
{txt}149{com}.                     local val = name[`i',1]
{txt}150{com}.                     local lab :label (`var') `val'
{txt}151{com}.                     noi di `""`lab'""' _continue
{txt}152{com}.                     if ( `i' == `unique' ) {c -(}
{txt}153{com}.                         noi di ""
{txt}154{com}.                     {c )-}
{txt}155{com}.                     else {c -(}
{txt}156{com}.                         noi di ", " _continue
{txt}157{com}.                     {c )-}
{txt}158{com}.                 {c )-}
{txt}159{com}.                 forvalues i=1/`unique' {c -(}
{txt}160{com}.                     if ( `i' == 1 ) {c -(}
{txt}161{com}.                         noi di "@freq " _continue
{txt}162{com}.                     {c )-}
{txt}163{com}.                     noi di freq[`i',1] _continue
{txt}164{com}.                     if ( `i' == `unique' ) {c -(}
{txt}165{com}.                         noi di ""
{txt}166{com}.                     {c )-}
{txt}167{com}.                     else {c -(}
{txt}168{com}.                         noi di ", " _continue
{txt}169{com}.                     {c )-}
{txt}170{com}.                 {c )-}
{txt}171{com}.             {c )-}
{txt}172{com}.         {c )-}
{txt}173{com}.     {c )-}
{txt}174{com}. {c )-}
{txt}175{com}. else {c -(}
{txt}176{com}.     noi di "@example0 " `var'[1]
{txt}177{com}. {c )-}
{txt}178{com}. 
. // histogram
. if ( "`isstr'" != "YES" & ("`class'" == "other" | "`class'" == "identifier") ) {c -(}
{txt}179{com}. cap noi {c -(}
{txt}180{com}.     tempvar h w
{txt}181{com}.     twoway__histogram_gen `var', gen( `h' `w' )
{txt}182{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}183{com}.         if ( `i' == 1 ) {c -(}
{txt}184{com}.             noi di "@histh " _continue
{txt}185{com}.         {c )-}
{txt}186{com}.         noi di `h'[`i'] _continue
{txt}187{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}188{com}.             noi di ""
{txt}189{com}.         {c )-}
{txt}190{com}.         else {c -(}
{txt}191{com}.             noi di ", " _continue
{txt}192{com}.         {c )-}
{txt}193{com}.     {c )-}
{txt}194{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}195{com}.         if ( `i' == 1 ) {c -(}
{txt}196{com}.             noi di "@histw " _continue
{txt}197{com}.         {c )-}
{txt}198{com}.         noi di `w'[`i'] _continue
{txt}199{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}200{com}.             noi di ""
{txt}201{com}.         {c )-}
{txt}202{com}.         else {c -(}
{txt}203{com}.             noi di ", " _continue
{txt}204{com}.         {c )-}
{txt}205{com}.     {c )-}
{txt}206{com}.     {c )-}
{txt}207{com}. {c )-}
{txt}208{com}. 
. noi di "@type `type'"
{txt}209{com}. noi di "@label `label'"
{txt}210{com}. noi di "@class `class'"
{txt}211{com}. noi di "@N_unique `unique'"
{txt}212{com}. noi di "@N `total'"
{txt}213{com}. 
. noi di as res " "
{txt}214{com}. noi di "_@NOTES"
{txt}215{com}. 
. noi notes `var'
{txt}216{com}. 
. noi di as res " "
{txt}217{com}. {c )-}
{txt}218{com}. 
. 
. {c )-}
=====country=====
@example0 Indonesia
@type str29
@label Country
@class string
@N_unique 50
@N 142857
{res} 
_@NOTES
 
=====sex=====
@freq 47495, 47698, 47664
@values "All persons", "Females", "Males"
@type str11
@label Sex
@class category
@N_unique 3
@N 142857
 
_@NOTES
 
=====variant=====
@freq 142857
@values "Baseline"
@example0 Baseline
@type str8
@label Variant
@class constant
@N_unique 1
@N 142857
 
_@NOTES
 
=====age=====
@freq 8010, 8018, 7962, 8009, 7880, 7910, 7930, 7917, 8019, 7981, 7981, 8004, 7863, 7989, 7993, 7922, 7759, 7710
@values "Population (hist&proj)  00-04, persons", "Population (hist&proj)  05-09, persons", "Population (hist&proj)  10-14, persons", "Population (hist&proj)  15-19, persons", "Population (hist&proj)  20-24, persons", "Population (hist&proj)  25-29, persons", "Population (hist&proj)  30-34, persons", "Population (hist&proj)  35-39, persons", "Population (hist&proj)  40-44, persons", "Population (hist&proj)  45-49, persons", "Population (hist&proj)  50-54, persons", "Population (hist&proj)  55-59, persons", "Population (hist&proj)  60-64, persons", "Population (hist&proj)  65-69, persons", "Population (hist&proj)  70-74, persons", "Population (hist&proj)  75-79, persons", "Population (hist&proj)  80-84, persons", "Population (hist&proj)  85+, persons "
@type str38
@label Age
@class category
@N_unique 18
@N 142857
 
_@NOTES
 
=====time=====

time:  Time                                     {txt}Number of Observations
{hline 11}                                 {hline 30}
                                            Total   Integers   Nonintegers
{c |}                  {res}#         {txt}Negative           {res}-         -          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Zero               {res}-         -          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Positive       {res}142857     142857          -
{txt}{c |}  {res}#   #   #   #   #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#   #   #   #   #         {txt}Total          {res}142857     142857          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}1950               2020                     142857
  (71 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 8}time {c |}{res}    142857    1985.104    20.50395       1950       2020
@mean  1985.104
@sd    20.504
@min      1950
@max      2020
@example0 1992
@histh .02067542, .01004191, .02047142, .01006231, .01023061, .02026232, .01028671, .01022551, .02057852, .01027651, .02036942, .01015411, .01013881, .02022152, .01010821, .01022041, .02021642, .01024591, .02065502, .01013371, .01035811, .02042552, .01028161, .01001131, .02033882, .01039891, .02094062, .01026631, .01027141, .02052242, .01033771, .01042441, .02068562, .01039381, .02040002, .01033261, .01017961, .02070092, .01032751, .01029691, .01996652, .01001131, .02112422, .01048561, .01050091, .02024702, .01039891, .01051621, .02084372, .01031731, .02069072
@histw 1950.6863, 1952.0588, 1953.4314, 1954.804, 1956.1765, 1957.5491, 1958.9215, 1960.2941, 1961.6666, 1963.0392, 1964.4117, 1965.7843, 1967.1569, 1968.5294, 1969.902, 1971.2745, 1972.6471, 1974.0197, 1975.3922, 1976.7646, 1978.1372, 1979.5098, 1980.8823, 1982.2549, 1983.6274, 1985, 1986.3726, 1987.7451, 1989.1177, 1990.4902, 1991.8628, 1993.2354, 1994.6078, 1995.9803, 1997.3529, 1998.7255, 2000.098, 2001.4706, 2002.8431, 2004.2157, 2005.5883, 2006.9608, 2008.3334, 2009.7059, 2011.0785, 2012.4509, 2013.8235, 2015.196, 2016.5686, 2017.9412, 2019.3137
@type int
@label Time
@class other
@N_unique 71
@N 142857
 
_@NOTES
 
=====value=====

value:  Value                                   {txt}Number of Observations
{hline 13}                               {hline 30}
                                            Total   Integers   Nonintegers
{c |}  {res}#                         {txt}Negative           {res}-         -          -
{txt}{c |}  {res}#                         {txt}Zero           {res}  233       233          -
{txt}{c |}  {res}#                         {txt}Positive       {res}142624     11288      131336
{txt}{c |}  {res}#                                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#                         {txt}Total          {res}142857     11521      131336
{txt}{c |}  {res}#   .   .   .   .         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}0              670244.6                     142857
(More than 99 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 7}value {c |}{res}    142857    7400.476    35463.61          0   670244.6
@mean  7400.476
@sd 35463.606
@min     0.000
@max  6.70e+05
@example0 9312.4678
@histh .0000696, 2.295e-06, 1.121e-06, 8.229e-07, 4.820e-07, 2.349e-07, 2.967e-07, 1.385e-07, 1.443e-07, 1.305e-07, 5.380e-08, 3.515e-08, 3.995e-08, 4.048e-08, 4.421e-08, 4.101e-08, 4.261e-08, 4.048e-08, 5.220e-08, 5.273e-08, 3.515e-08, 2.876e-08, 4.261e-08, 4.741e-08, 2.716e-08, 1.332e-08, 7.990e-09, 9.588e-09, 7.457e-09, 8.522e-09, 7.457e-09, 7.457e-09, 6.392e-09, 5.859e-09, 4.261e-09, 8.522e-09, 6.392e-09, 1.225e-08, 1.012e-08, 1.119e-08, 5.326e-09, 6.392e-09, 3.728e-09, 2.663e-09, 7.457e-09, 1.438e-08, 1.332e-08, 1.065e-08, 5.859e-09, 3.728e-09, 3.728e-09
@histw 6571.0259, 19713.078, 32855.129, 45997.18, 59139.23, 72281.281, 85423.336, 98565.383, 111707.44, 124849.49, 137991.55, 151133.59, 164275.64, 177417.69, 190559.75, 203701.8, 216843.84, 229985.91, 243127.95, 256270, 269412.06, 282554.09, 295696.16, 308838.22, 321980.25, 335122.31, 348264.38, 361406.41, 374548.47, 387690.53, 400832.56, 413974.63, 427116.69, 440258.72, 453400.78, 466542.81, 479684.88, 492826.94, 505968.97, 519111.03, 532253.06, 545395.13, 558537.19, 571679.25, 584821.31, 597963.31, 611105.38, 624247.44, 637389.5, 650531.56, 663673.63
@type float
@label Value
@class other
@N_unique .
@N 142857
 
_@NOTES
 
=====flags=====
@freq 1451, 336
@values "B", "E"
@type str1
@label Flags
@class dummy
@N_unique 2
@N 1787
 
_@NOTES
 
{com}. 
. // noi profiler report
. // profiler off
. {c )-}
{txt}
{com}. 
. exit, clear STATA
