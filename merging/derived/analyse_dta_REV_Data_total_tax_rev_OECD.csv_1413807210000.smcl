{smcl}
{txt}{sf}{ul off}

{com}. /** 
>  * A do file to run the standard stats for a whole data set. 
>  *
>  * Note that you must delete the files in the derived directory
>  * for changes to be reflected in the output.
>  *
>  * @version 0.1
> */
. 
. // profiler on
. 
. cap noi {c -(}
. 
. import delimited  "/Users/mas/Dropbox/National_Pride_Large_Data/Data/EVC_data/OECD data/Revenue/REV_Data_total_tax_rev_OECD.csv"
{res}{text}(10 vars, 15881 obs){com}. 
. describe, short

{txt}Contains data
  obs:{res}        15,881                          
{txt} vars:{res}            10                          
{txt} size:{res}     2,461,555                          
{txt}Sorted by:  
{res}     Note:  dataset has changed since last saved
{com}. 
. local N = r(N)
. local variables = r(k)
. 
. di "@N `N'"
{res}@N 15881
{com}. di "@variables `variables'"
{res}@variables 10
{com}. 
. datasignature
  {res}15881:10(69500):971523194:4100778038
{com}. local datasig = "`r(datasignature)'"
. 
. di "@datasignature `datasig'"
{res}@datasignature 15881:10(69500):971523194:4100778038
{com}. 
. cap noi xtset
{err}panel variable not set; use {bf:xtset} {it:varname} ...
{com}. if ( !_rc ) {c -(}
.     di "@timevar `r(timevar)'"
.     di "@panelvar `r(panelvar)'"
. {c )-}
. 
. notes _dta
{res}{com}. 
. qui {c -(}
. 
. foreach var of varlist * {c -(}
{txt}  2{com}. 
. di "=====`var'====="
{txt}  3{com}. qui {c -(}
{txt}  4{com}. local category_cutoff = 30
{txt}  5{com}. 
. // this takes very long on large datasets (and does mostly the same as other things below)
. // codebook `var'
. 
. local isstr = ""
{txt}  6{com}. local unique = ""
{txt}  7{com}. local total = ""
{txt}  8{com}. local class = ""
{txt}  9{com}. 
. local type : type `var' 
{txt} 10{com}. local label : variable label `var' 
{txt} 11{com}. 
. local class = "other"
{txt} 12{com}. 
. // test for string
. capture confirm string variable `var'
{txt} 13{com}. if ( !_rc ) {c -(}
{txt} 14{com}.     // we now it is a string
.     local isstr = "YES"
{txt} 15{com}.     capture tab `var', matcell( freq )
{txt} 16{com}.     if ( !_rc ) {c -(}
{txt} 17{com}.     
.         // not too many obs
.         local total = `r(N)'
{txt} 18{com}.         local unique = r(r)
{txt} 19{com}. 
.         if ( `unique' < `category_cutoff' ) {c -(}
{txt} 20{com}.         forvalues i=1/`unique' {c -(}
{txt} 21{com}.             if ( `i' == 1 ) {c -(}
{txt} 22{com}.                 noi di "@freq " _continue
{txt} 23{com}.             {c )-}
{txt} 24{com}.             noi di freq[`i',1] _continue
{txt} 25{com}.             if ( `i' == `unique' ) {c -(}
{txt} 26{com}.                 noi di ""
{txt} 27{com}.             {c )-}
{txt} 28{com}.             else {c -(}
{txt} 29{com}.                 noi di ", " _continue
{txt} 30{com}.             {c )-}
{txt} 31{com}.         {c )-}
{txt} 32{com}. 
.         levelsof `var', local(levels)
{txt} 33{com}.         local i = 1
{txt} 34{com}.         foreach l of local levels {c -(}
{txt} 35{com}.             if ( `i' == 1 ) {c -(}
{txt} 36{com}.                 noi di "@values " _continue
{txt} 37{com}.             {c )-}
{txt} 38{com}.             noi di `""`l'""' _continue
{txt} 39{com}.             if ( `i' == `unique' ) {c -(}
{txt} 40{com}.                 noi di ""
{txt} 41{com}.             {c )-}
{txt} 42{com}.             else {c -(}
{txt} 43{com}.                 noi di ", " _continue
{txt} 44{com}.             {c )-}
{txt} 45{com}.             local i = `i' + 1
{txt} 46{com}.         {c )-}
{txt} 47{com}.         {c )-}
{txt} 48{com}.         
.         if ( `total' == 0 ) {c -(}
{txt} 49{com}.             local class = "empty"
{txt} 50{com}.         {c )-}
{txt} 51{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 52{com}.             local class = "constant"
{txt} 53{com}.         {c )-}
{txt} 54{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 55{com}.             local class = "dummy"
{txt} 56{com}.         {c )-}
{txt} 57{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 58{com}.             local class = "category"
{txt} 59{com}.         {c )-}
{txt} 60{com}.         else if (`unique' == `total') {c -(}
{txt} 61{com}.             local class = "identifier"
{txt} 62{com}.         {c )-} 
{txt} 63{com}.         else {c -(}
{txt} 64{com}.             local class = "string"
{txt} 65{com}.         {c )-}        
{txt} 66{com}.     {c )-}
{txt} 67{com}.     else {c -(}
{txt} 68{com}.         // lots of observations, not sure what to do yet
.         // should get random samples here
.         noi di "@example0 " `var'[1]
{txt} 69{com}.     {c )-}
{txt} 70{com}. {c )-}
{txt} 71{com}. else {c -(}
{txt} 72{com}.     // else assume it is numeric
. 
.     noi inspect `var'
{txt} 73{com}. 
.     local total = r(N)
{txt} 74{com}.     local unique = r(N_unique)
{txt} 75{com}. 
.     if ( `unique' < `category_cutoff' ) {c -(}
{txt} 76{com}.         local cat = "YES"
{txt} 77{com}.     {c )-}
{txt} 78{com}. 
.     if ( "`unique'" != "." ) {c -(}
{txt} 79{com}.         if ( `total' == 0 ) {c -(}
{txt} 80{com}.             local class = "empty"
{txt} 81{com}.         {c )-}
{txt} 82{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 83{com}.             local class = "constant"
{txt} 84{com}.         {c )-}
{txt} 85{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 86{com}.             local class = "dummy"
{txt} 87{com}.         {c )-}
{txt} 88{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 89{com}.             capture confirm string variable `var'
{txt} 90{com}.             if ( !_rc ) {c -(}
{txt} 91{com}.                 local class = "other"
{txt} 92{com}.             {c )-} 
{txt} 93{com}.             else {c -(}
{txt} 94{com}.                 local class = "category"
{txt} 95{com}.             {c )-}
{txt} 96{com}.         {c )-}
{txt} 97{com}.         else if (`r(N_unique)' == `r(N)') {c -(}
{txt} 98{com}.             local class = "identifier"
{txt} 99{com}.         {c )-}
{txt}100{com}.     {c )-}
{txt}101{com}. 
. // TODO this takes too long?   sum `var', detail
.     noi sum `var'
{txt}102{com}.     local min = r(min)
{txt}103{com}.     local max = r(max)
{txt}104{com}.     local nobs = r(N)
{txt}105{com}.     
.     // TODO maybe the precision should be handled later (vm?)
.     if ( ( "`type'" != "double" & "`type'" != "float" ) & "`class'" == "constant" ) {c -(}
{txt}106{com}.         noi di "@mean " %9.0f r(mean)
{txt}107{com}.     {c )-} 
{txt}108{com}.     else {c -(}
{txt}109{com}.         noi di "@mean " %9.3f r(mean)
{txt}110{com}.     {c )-}
{txt}111{com}.     noi di "@sd " %9.3f `r(sd)'
{txt}112{com}.     // noi di "@skewness " %9.3f `r(skewness)'
.     // noi di "@kurtosis " %9.3f `r(kurtosis)'
.     
.     if ( "`type'" == "double" | "`type'" == "float" ) {c -(}
{txt}113{com}.       noi di "@min " %9.3f `r(min)'
{txt}114{com}.       noi di "@max " %9.3f `r(max)'
{txt}115{com}.       // noi di "@p50 " %9.3f `r(p50)'
.     {c )-} 
{txt}116{com}.     else {c -(}
{txt}117{com}.       noi di "@min " %9.0f `r(min)'
{txt}118{com}.       noi di "@max " %9.0f `r(max)'
{txt}119{com}.       // noi di "@p50 " %9.0f `r(p50)'
.     {c )-}
{txt}120{com}. {c )-}
{txt}121{com}. 
. 
. if ( ( "`class'" == "constant" ) & ( "`isstr'"!= "YES" ) ) {c -(}
{txt}122{com}.     noi di "@values " `var'[1]
{txt}123{com}. {c )-}
{txt}124{com}. else if ( "`class'" == "category" | "`class'" == "dummy" ) {c -(}
{txt}125{com}.     cap noi {c -(}
{txt}126{com}.         if ( "`isstr'" != "YES" ) {c -(}
{txt}127{com}.             cap tab `var', matcell( freq ) matrow( name )
{txt}128{com}.             if ( _rc != 0 | ("`r(r)'" != "`unique'") ) {c -(}
{txt}129{com}.                 local class = "other"
{txt}130{com}.                 local unique = r(r)
{txt}131{com}.             {c )-}
{txt}132{com}.             else {c -(}
{txt}133{com}.                 forvalues i=1/`unique' {c -(}
{txt}134{com}.                     if ( `i' == 1 ) {c -(}
{txt}135{com}.                         noi di "@values " _continue
{txt}136{com}.                     {c )-}
{txt}137{com}.                     noi di name[`i',1] _continue
{txt}138{com}.                     if ( `i' == `unique' ) {c -(}
{txt}139{com}.                         noi di ""
{txt}140{com}.                     {c )-}
{txt}141{com}.                     else {c -(}
{txt}142{com}.                         noi di ", " _continue
{txt}143{com}.                     {c )-}
{txt}144{com}.                 {c )-}
{txt}145{com}.                 forvalues i=1/`unique' {c -(}
{txt}146{com}.                     if ( `i' == 1 ) {c -(}
{txt}147{com}.                         noi di "@names " _continue
{txt}148{com}.                     {c )-}
{txt}149{com}.                     local val = name[`i',1]
{txt}150{com}.                     local lab :label (`var') `val'
{txt}151{com}.                     noi di `""`lab'""' _continue
{txt}152{com}.                     if ( `i' == `unique' ) {c -(}
{txt}153{com}.                         noi di ""
{txt}154{com}.                     {c )-}
{txt}155{com}.                     else {c -(}
{txt}156{com}.                         noi di ", " _continue
{txt}157{com}.                     {c )-}
{txt}158{com}.                 {c )-}
{txt}159{com}.                 forvalues i=1/`unique' {c -(}
{txt}160{com}.                     if ( `i' == 1 ) {c -(}
{txt}161{com}.                         noi di "@freq " _continue
{txt}162{com}.                     {c )-}
{txt}163{com}.                     noi di freq[`i',1] _continue
{txt}164{com}.                     if ( `i' == `unique' ) {c -(}
{txt}165{com}.                         noi di ""
{txt}166{com}.                     {c )-}
{txt}167{com}.                     else {c -(}
{txt}168{com}.                         noi di ", " _continue
{txt}169{com}.                     {c )-}
{txt}170{com}.                 {c )-}
{txt}171{com}.             {c )-}
{txt}172{com}.         {c )-}
{txt}173{com}.     {c )-}
{txt}174{com}. {c )-}
{txt}175{com}. else {c -(}
{txt}176{com}.     noi di "@example0 " `var'[1]
{txt}177{com}. {c )-}
{txt}178{com}. 
. // histogram
. if ( "`isstr'" != "YES" & ("`class'" == "other" | "`class'" == "identifier") ) {c -(}
{txt}179{com}. cap noi {c -(}
{txt}180{com}.     tempvar h w
{txt}181{com}.     twoway__histogram_gen `var', gen( `h' `w' )
{txt}182{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}183{com}.         if ( `i' == 1 ) {c -(}
{txt}184{com}.             noi di "@histh " _continue
{txt}185{com}.         {c )-}
{txt}186{com}.         noi di `h'[`i'] _continue
{txt}187{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}188{com}.             noi di ""
{txt}189{com}.         {c )-}
{txt}190{com}.         else {c -(}
{txt}191{com}.             noi di ", " _continue
{txt}192{com}.         {c )-}
{txt}193{com}.     {c )-}
{txt}194{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}195{com}.         if ( `i' == 1 ) {c -(}
{txt}196{com}.             noi di "@histw " _continue
{txt}197{com}.         {c )-}
{txt}198{com}.         noi di `w'[`i'] _continue
{txt}199{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}200{com}.             noi di ""
{txt}201{com}.         {c )-}
{txt}202{com}.         else {c -(}
{txt}203{com}.             noi di ", " _continue
{txt}204{com}.         {c )-}
{txt}205{com}.     {c )-}
{txt}206{com}.     {c )-}
{txt}207{com}. {c )-}
{txt}208{com}. 
. noi di "@type `type'"
{txt}209{com}. noi di "@label `label'"
{txt}210{com}. noi di "@class `class'"
{txt}211{com}. noi di "@N_unique `unique'"
{txt}212{com}. noi di "@N `total'"
{txt}213{com}. 
. noi di as res " "
{txt}214{com}. noi di "_@NOTES"
{txt}215{com}. 
. noi notes `var'
{txt}216{com}. 
. noi di as res " "
{txt}217{com}. {c )-}
{txt}218{com}. 
. 
. {c )-}
=====government=====
@freq 2379, 2377, 2377, 707, 8041
@values "Federal or Central government", "Local government", "Social Security Funds", "State/Regional", "Total"
@type str29
@label Government
@class category
@N_unique 5
@N 15881
{res} 
_@NOTES
 
=====tax=====
@freq 15881
@values "Total tax revenue"
@example0 Total tax revenue
@type str17
@label Tax
@class constant
@N_unique 1
@N 15881
 
_@NOTES
 
=====variable=====
@freq 1377, 1415, 5419, 1233, 5204, 1233
@values "Growth rate of tax revenue", "Tax revenue (excluding social security) as percentage of GDP", "Tax revenue as percentage of GDP", "Tax revenue in USD", "Tax revenue in national currency", "Tax revenue per capita"
@type str60
@label Variable
@class category
@N_unique 6
@N 15881
 
_@NOTES
 
=====country=====
@example0 Australia
@type str15
@label Country
@class string
@N_unique 35
@N 15881
 
_@NOTES
 
=====year=====

year:  Year                                     {txt}Number of Observations
{hline 11}                                 {hline 30}
                                            Total   Integers   Nonintegers
{c |}                  {res}#         {txt}Negative           {res}-         -          -
{txt}{c |}              {res}#   #         {txt}Zero               {res}-         -          -
{txt}{c |}          {res}#   #   #         {txt}Positive       {res}15881     15881          -
{txt}{c |}      {res}#   #   #   #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#   #   #   #   #         {txt}Total          {res}15881     15881          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}1965               2012                     15881
  (48 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 8}year {c |}{res}     15881    1992.618    12.49526       1965       2012
@mean  1992.618
@sd    12.495
@min      1965
@max      2012
@example0 1973
@histh .01260438, .00658354, .00658354, .00658354, .00804655, .0077652, .00804655, .01502397, .03122961, .01536159, .01536159, .01536159, .0168246, .01851269, .01862523, .01862523, .03725046, .01862523, .01862523, .01862523, .01862523, .01873777, .01969435, .02098855, .02110109, .04349638, .02425218, .02447726, .02447726, .02447726, .02447726, .02447726, .02447726, .04895452, .02447726, .02447726, .02447726, .02447726, .02447726, .02447726, .02447726, .045297
@histw 1965.5596, 1966.6786, 1967.7976, 1968.9166, 1970.0358, 1971.1548, 1972.2738, 1973.3928, 1974.512, 1975.631, 1976.75, 1977.869, 1978.988, 1980.1072, 1981.2262, 1982.3452, 1983.4642, 1984.5834, 1985.7024, 1986.8214, 1987.9404, 1989.0596, 1990.1786, 1991.2976, 1992.4166, 1993.5358, 1994.6548, 1995.7738, 1996.8928, 1998.012, 1999.131, 2000.25, 2001.369, 2002.488, 2003.6072, 2004.7262, 2005.8452, 2006.9642, 2008.0834, 2009.2024, 2010.3214, 2011.4404
@type int
@label Year
@class other
@N_unique 48
@N 15881
 
_@NOTES
 
=====unitofmeasureused=====
@freq 203, 208, 92, 80, 180, 2383, 88, 1377, 138, 162, 72, 168, 168, 6834, 168, 168, 208, 147, 2674, 113, 166, 84
@values "Australian Dollar", "Canadian Dollar", "Chilean Peso", "Czech Koruna", "Danish Krone", "Euro", "Forint", "Growth rate", "Iceland Krona", "Mexican Peso", "New Israeli Sheqel", "New Zealand Dollar", "Norwegian Krone", "Percentage", "Pound Sterling", "Swedish Krona", "Swiss Franc", "Turkish Lira", "US Dollar", "Won", "Yen", "Zloty"
@type str18
@label Unit of measure used
@class category
@N_unique 22
@N 15881
 
_@NOTES
 
=====powercode=====
@freq 5204, 1233, 9444
@values "Billions", "Millions", "Units"
@type str8
@label Power code
@class category
@N_unique 3
@N 15881
 
_@NOTES
 
=====referenceperiod=====

referenceperiod:  Reference period              {txt}Number of Observations
{hline 34}          {hline 30}
                                            Total   Integers   Nonintegers
{c |}                            Negative           {res}-         -          -
{txt}{c |}                            Zero               {res}-         -          -
{txt}{c |}                            Positive           {res}-         -          -
{txt}{c |}                                           {hline 5}     {hline 5}      {hline 5}
{c |}                            Total              {res}-         -          -
{txt}{c |}                            Missing        {res}15881
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}.             -9.0e+307                     15881
   (0 unique value)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
referencep~d {c |}{res}         0
@mean         .
@sd 
@min 
@max 
@example0 .
@type byte
@label Reference period
@class empty
@N_unique 0
@N 0
 
_@NOTES
 
=====value=====

value:  Value                                   {txt}Number of Observations
{hline 13}                               {hline 30}
                                            Total   Integers   Nonintegers
{c |}  {res}#                         {txt}Negative       {res}   89         -         89
{txt}{c |}  {res}#                         {txt}Zero           {res}  272       272          -
{txt}{c |}  {res}#                         {txt}Positive       {res}15520       223      15297
{txt}{c |}  {res}#                                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#                         {txt}Total          {res}15881       495      15386
{txt}{c |}  {res}#   .   .   .   .         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}-18.419         3955122                     15881
(More than 99 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 7}value {c |}{res}     15881    18591.33    140607.1    -18.419    3955122
@mean 18591.333
@sd  1.41e+05
@min   -18.419
@max  3.96e+06
@example0 10.9
@histh .00001025, 1.504e-07, 6.887e-08, 2.875e-08, 2.006e-08, 1.538e-08, 9.361e-09, 8.693e-09, 7.355e-09, 1.137e-08, 8.693e-09, 4.681e-09, 4.681e-09, 7.355e-09, 3.343e-09, 1.337e-09, 1.337e-09, 1.337e-09, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 1.337e-09, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 6.687e-10, 2.006e-09, 1.337e-09
@histw 47066.586, 141236.59, 235406.61, 329576.63, 423746.63, 517916.63, 612086.63, 706256.63, 800426.69, 894596.69, 988766.69, 1082936.8, 1177106.8, 1271276.8, 1365446.8, 1459616.8, 1553786.8, 1647956.8, 1742126.8, 1836296.8, 1930466.8, 2024636.8, 2212976.8, 2401316.8, 2589656.8, 2683826.8, 2777997, 2872167, 2966337, 3060507, 3343017, 3437187, 3531357, 3719697, 3908037
@type float
@label Value
@class other
@N_unique .
@N 15881
 
_@NOTES
 
=====flags=====

flags:  Flags                                   {txt}Number of Observations
{hline 13}                               {hline 30}
                                            Total   Integers   Nonintegers
{c |}                            Negative           {res}-         -          -
{txt}{c |}                            Zero               {res}-         -          -
{txt}{c |}                            Positive           {res}-         -          -
{txt}{c |}                                           {hline 5}     {hline 5}      {hline 5}
{c |}                            Total              {res}-         -          -
{txt}{c |}                            Missing        {res}15881
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}.             -9.0e+307                     15881
   (0 unique value)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 7}flags {c |}{res}         0
@mean         .
@sd 
@min 
@max 
@example0 .
@type byte
@label Flags
@class empty
@N_unique 0
@N 0
 
_@NOTES
 
{com}. 
. // noi profiler report
. // profiler off
. {c )-}
{txt}
{com}. 
. exit, clear STATA
