{smcl}
{txt}{sf}{ul off}
{com}. /** 
>  * A do file to run the standard stats for a whole data set. 
>  *
>  * Note that you must delete the files in the derived directory
>  * for changes to be reflected in the output.
>  *
>  * @version 0.1
> */
. 
. // profiler on
. 
. use  "/usr/local/stata/ado/base/s/sandstone.dta"
{txt}(Subsea elevation of Lamont sandstone in an area of Ohio)

{com}. 
. describe, short

{txt}Contains data from {res}/usr/local/stata/ado/base/s/sandstone.dta
{txt}  obs:{res}         6,400                          Subsea elevation of Lamont
                                                sandstone in an area of Ohio
{txt} vars:{res}             4                          9 Jun 2011 09:23
{txt} size:{res}        70,400                          
{txt}Sorted by:  {res}northing  easting
{txt}
{com}. 
. local N = r(N)
{txt}
{com}. local variables = r(k)
{txt}
{com}. 
. di "@N `N'"
{res}@N 6400
{txt}
{com}. di "@variables `variables'"
{res}@variables 4
{txt}
{com}. 
. datasignature
  {res}6400:4(73753):2126002103:3584502953
{txt}
{com}. local datasig = "`r(datasignature)'"
{txt}
{com}. 
. di "@datasignature `datasig'"
{res}@datasignature 6400:4(73753):2126002103:3584502953
{txt}
{com}. 
. cap noi xtset
{err}panel variable not set; use {bf:xtset} {it:varname} ...
{txt}
{com}. if ( !_rc ) {c -(}
.     di "@timevar `r(timevar)'"
.     di "@panelvar `r(panelvar)'"
. {c )-}
{txt}
{com}. 
. notes _dta
{res}
_dta:
{txt}{p 2 6}
1.
Data is artificial data based on a dataset from Statistics and Data Analysis in Geology, 3rd edition, by John C Davis
{p_end}

{com}. 
. qui {c -(}
{txt}
{com}. 
. foreach var of varlist * {c -(}
{txt}  2{com}. 
. di "=====`var'====="
{txt}  3{com}. qui {c -(}
{txt}  4{com}. local category_cutoff = 30
{txt}  5{com}. 
. // this takes very long on large datasets (and does mostly the same as other things below)
. // codebook `var'
. 
. local isstr = ""
{txt}  6{com}. local unique = ""
{txt}  7{com}. local total = ""
{txt}  8{com}. local class = ""
{txt}  9{com}. 
. local type : type `var' 
{txt} 10{com}. local label : variable label `var' 
{txt} 11{com}. 
. local class = "other"
{txt} 12{com}. 
. // test for string
. capture confirm string variable `var'
{txt} 13{com}. if ( !_rc ) {c -(}
{txt} 14{com}.     // we now it is a string
.     local isstr = "YES"
{txt} 15{com}.     capture tab `var', matcell( freq )
{txt} 16{com}.     if ( !_rc ) {c -(}
{txt} 17{com}.     
.         // not too many obs
.         local total = `r(N)'
{txt} 18{com}.         local unique = r(r)
{txt} 19{com}. 
.         if ( `unique' < `category_cutoff' ) {c -(}
{txt} 20{com}.         forvalues i=1/`unique' {c -(}
{txt} 21{com}.             if ( `i' == 1 ) {c -(}
{txt} 22{com}.                 noi di "@freq " _continue
{txt} 23{com}.             {c )-}
{txt} 24{com}.             noi di freq[`i',1] _continue
{txt} 25{com}.             if ( `i' == `unique' ) {c -(}
{txt} 26{com}.                 noi di ""
{txt} 27{com}.             {c )-}
{txt} 28{com}.             else {c -(}
{txt} 29{com}.                 noi di ", " _continue
{txt} 30{com}.             {c )-}
{txt} 31{com}.         {c )-}
{txt} 32{com}. 
.         levelsof `var', local(levels)
{txt} 33{com}.         local i = 1
{txt} 34{com}.         foreach l of local levels {c -(}
{txt} 35{com}.             if ( `i' == 1 ) {c -(}
{txt} 36{com}.                 noi di "@values " _continue
{txt} 37{com}.             {c )-}
{txt} 38{com}.             noi di `""`l'""' _continue
{txt} 39{com}.             if ( `i' == `unique' ) {c -(}
{txt} 40{com}.                 noi di ""
{txt} 41{com}.             {c )-}
{txt} 42{com}.             else {c -(}
{txt} 43{com}.                 noi di ", " _continue
{txt} 44{com}.             {c )-}
{txt} 45{com}.             local i = `i' + 1
{txt} 46{com}.         {c )-}
{txt} 47{com}.         {c )-}
{txt} 48{com}.         
.         if ( `total' == 0 ) {c -(}
{txt} 49{com}.             local class = "empty"
{txt} 50{com}.         {c )-}
{txt} 51{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 52{com}.             local class = "constant"
{txt} 53{com}.         {c )-}
{txt} 54{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 55{com}.             local class = "dummy"
{txt} 56{com}.         {c )-}
{txt} 57{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 58{com}.             local class = "category"
{txt} 59{com}.         {c )-}
{txt} 60{com}.         else if (`unique' == `total') {c -(}
{txt} 61{com}.             local class = "identifier"
{txt} 62{com}.         {c )-} 
{txt} 63{com}.         else {c -(}
{txt} 64{com}.             local class = "string"
{txt} 65{com}.         {c )-}        
{txt} 66{com}.     {c )-}
{txt} 67{com}.     else {c -(}
{txt} 68{com}.         // lots of observations, not sure what to do yet
.         // should get random samples here
.         noi di "@example0 " `var'[1]
{txt} 69{com}.     {c )-}
{txt} 70{com}. {c )-}
{txt} 71{com}. else {c -(}
{txt} 72{com}.     // else assume it is numeric
. 
.     noi inspect `var'
{txt} 73{com}. 
.     local total = r(N)
{txt} 74{com}.     local unique = r(N_unique)
{txt} 75{com}. 
.     if ( `unique' < `category_cutoff' ) {c -(}
{txt} 76{com}.         local cat = "YES"
{txt} 77{com}.     {c )-}
{txt} 78{com}. 
.     if ( "`unique'" != "." ) {c -(}
{txt} 79{com}.         if ( `total' == 0 ) {c -(}
{txt} 80{com}.             local class = "empty"
{txt} 81{com}.         {c )-}
{txt} 82{com}.         else if ( `unique' == 1 ) {c -(}
{txt} 83{com}.             local class = "constant"
{txt} 84{com}.         {c )-}
{txt} 85{com}.         else if ( `unique' == 2 ) {c -(}
{txt} 86{com}.             local class = "dummy"
{txt} 87{com}.         {c )-}
{txt} 88{com}.         else if ( `unique' < `category_cutoff' & `unique' < `total' ) {c -(}
{txt} 89{com}.             capture confirm string variable `var'
{txt} 90{com}.             if ( !_rc ) {c -(}
{txt} 91{com}.                 local class = "other"
{txt} 92{com}.             {c )-} 
{txt} 93{com}.             else {c -(}
{txt} 94{com}.                 local class = "category"
{txt} 95{com}.             {c )-}
{txt} 96{com}.         {c )-}
{txt} 97{com}.         else if (`r(N_unique)' == `r(N)') {c -(}
{txt} 98{com}.             local class = "identifier"
{txt} 99{com}.         {c )-}
{txt}100{com}.     {c )-}
{txt}101{com}. 
. // TODO this takes too long?   sum `var', detail
.     noi sum `var'
{txt}102{com}.     local min = r(min)
{txt}103{com}.     local max = r(max)
{txt}104{com}.     local nobs = r(N)
{txt}105{com}.     
.     // TODO maybe the precision should be handled later (vm?)
.     if ( ( "`type'" != "double" & "`type'" != "float" ) & "`class'" == "constant" ) {c -(}
{txt}106{com}.         noi di "@mean " %9.0f r(mean)
{txt}107{com}.     {c )-} 
{txt}108{com}.     else {c -(}
{txt}109{com}.         noi di "@mean " %9.3f r(mean)
{txt}110{com}.     {c )-}
{txt}111{com}.     noi di "@sd " %9.3f `r(sd)'
{txt}112{com}.     // noi di "@skewness " %9.3f `r(skewness)'
.     // noi di "@kurtosis " %9.3f `r(kurtosis)'
.     
.     if ( "`type'" == "double" | "`type'" == "float" ) {c -(}
{txt}113{com}.       noi di "@min " %9.3f `r(min)'
{txt}114{com}.       noi di "@max " %9.3f `r(max)'
{txt}115{com}.       // noi di "@p50 " %9.3f `r(p50)'
.     {c )-} 
{txt}116{com}.     else {c -(}
{txt}117{com}.       noi di "@min " %9.0f `r(min)'
{txt}118{com}.       noi di "@max " %9.0f `r(max)'
{txt}119{com}.       // noi di "@p50 " %9.0f `r(p50)'
.     {c )-}
{txt}120{com}. {c )-}
{txt}121{com}. 
. 
. if ( ( "`class'" == "constant" ) & ( "`isstr'"!= "YES" ) ) {c -(}
{txt}122{com}.     noi di "@values " `var'[1]
{txt}123{com}. {c )-}
{txt}124{com}. else if ( "`class'" == "category" | "`class'" == "dummy" ) {c -(}
{txt}125{com}.     cap noi {c -(}
{txt}126{com}.         if ( "`isstr'" != "YES" ) {c -(}
{txt}127{com}.             cap tab `var', matcell( freq ) matrow( name )
{txt}128{com}.             if ( _rc != 0 | ("`r(r)'" != "`unique'") ) {c -(}
{txt}129{com}.                 local class = "other"
{txt}130{com}.                 local unique = r(r)
{txt}131{com}.             {c )-}
{txt}132{com}.             else {c -(}
{txt}133{com}.                 forvalues i=1/`unique' {c -(}
{txt}134{com}.                     if ( `i' == 1 ) {c -(}
{txt}135{com}.                         noi di "@values " _continue
{txt}136{com}.                     {c )-}
{txt}137{com}.                     noi di name[`i',1] _continue
{txt}138{com}.                     if ( `i' == `unique' ) {c -(}
{txt}139{com}.                         noi di ""
{txt}140{com}.                     {c )-}
{txt}141{com}.                     else {c -(}
{txt}142{com}.                         noi di ", " _continue
{txt}143{com}.                     {c )-}
{txt}144{com}.                 {c )-}
{txt}145{com}.                 forvalues i=1/`unique' {c -(}
{txt}146{com}.                     if ( `i' == 1 ) {c -(}
{txt}147{com}.                         noi di "@names " _continue
{txt}148{com}.                     {c )-}
{txt}149{com}.                     local val = name[`i',1]
{txt}150{com}.                     local lab :label (`var') `val'
{txt}151{com}.                     noi di `""`lab'""' _continue
{txt}152{com}.                     if ( `i' == `unique' ) {c -(}
{txt}153{com}.                         noi di ""
{txt}154{com}.                     {c )-}
{txt}155{com}.                     else {c -(}
{txt}156{com}.                         noi di ", " _continue
{txt}157{com}.                     {c )-}
{txt}158{com}.                 {c )-}
{txt}159{com}.                 forvalues i=1/`unique' {c -(}
{txt}160{com}.                     if ( `i' == 1 ) {c -(}
{txt}161{com}.                         noi di "@freq " _continue
{txt}162{com}.                     {c )-}
{txt}163{com}.                     noi di freq[`i',1] _continue
{txt}164{com}.                     if ( `i' == `unique' ) {c -(}
{txt}165{com}.                         noi di ""
{txt}166{com}.                     {c )-}
{txt}167{com}.                     else {c -(}
{txt}168{com}.                         noi di ", " _continue
{txt}169{com}.                     {c )-}
{txt}170{com}.                 {c )-}
{txt}171{com}.             {c )-}
{txt}172{com}.         {c )-}
{txt}173{com}.     {c )-}
{txt}174{com}. {c )-}
{txt}175{com}. else {c -(}
{txt}176{com}.     noi di "@example0 " `var'[1]
{txt}177{com}. {c )-}
{txt}178{com}. 
. // histogram
. if ( "`isstr'" != "YES" & ("`class'" == "other" | "`class'" == "identifier") ) {c -(}
{txt}179{com}. cap noi {c -(}
{txt}180{com}.     tempvar h w
{txt}181{com}.     twoway__histogram_gen `var', gen( `h' `w' )
{txt}182{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}183{com}.         if ( `i' == 1 ) {c -(}
{txt}184{com}.             noi di "@histh " _continue
{txt}185{com}.         {c )-}
{txt}186{com}.         noi di `h'[`i'] _continue
{txt}187{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}188{com}.             noi di ""
{txt}189{com}.         {c )-}
{txt}190{com}.         else {c -(}
{txt}191{com}.             noi di ", " _continue
{txt}192{com}.         {c )-}
{txt}193{com}.     {c )-}
{txt}194{com}.     forvalues i=1/`=r(n_x)' {c -(}
{txt}195{com}.         if ( `i' == 1 ) {c -(}
{txt}196{com}.             noi di "@histw " _continue
{txt}197{com}.         {c )-}
{txt}198{com}.         noi di `w'[`i'] _continue
{txt}199{com}.         if ( `i' == `=r(n_x)' ) {c -(}
{txt}200{com}.             noi di ""
{txt}201{com}.         {c )-}
{txt}202{com}.         else {c -(}
{txt}203{com}.             noi di ", " _continue
{txt}204{com}.         {c )-}
{txt}205{com}.     {c )-}
{txt}206{com}.     {c )-}
{txt}207{com}. {c )-}
{txt}208{com}. 
. noi di "@type `type'"
{txt}209{com}. noi di "@label `label'"
{txt}210{com}. noi di "@class `class'"
{txt}211{com}. noi di "@N_unique `unique'"
{txt}212{com}. noi di "@N `total'"
{txt}213{com}. 
. noi di as res " "
{txt}214{com}. noi di "_@NOTES"
{txt}215{com}. 
. noi notes `var'
{txt}216{com}. 
. noi di as res " "
{txt}217{com}. {c )-}
{txt}218{com}. 
. 
. {c )-}
=====depth=====

{res}depth:  Depth (ft)                              {txt}Number of Observations
{hline 18}                          {hline 30}
                                            Total   Integers   Nonintegers
{c |}              {res}#             {txt}Negative           {res}-         -          -
{txt}{c |}              {res}#             {txt}Zero               {res}-         -          -
{txt}{c |}              {res}#             {txt}Positive       {res} 6400      6400          -
{txt}{c |}              {res}#   #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}          {res}#   #   #         {txt}Total          {res} 6400      6400          -
{txt}{c |}  {res}.   .   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}7556               8061                      6400
(More than 99 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 7}depth {c |}{res}      6400    7900.934    82.07205       7556       8061
@mean  7900.934
@sd    82.072
@min      7556
@max      8061
@example0 7620
@histh .00004703, .00007054, .0000823, .00014109, .00014109, .00019988, .00024691, .00031745, .00029394, .00036448, .00050557, .00037624, .00051733, .00052908, .00058787, .00065842, .00074072, .00078775, .00111696, .00233973, .00261015, .00289233, .00386819, .00392698, .00690161, .00552599, .00544369, .00587871, .00268069, .00431498, .00353899, .00482054, .0039505, .00406807, .00252785, .00141089, .00041151, .00041151
@histw 7562.6445, 7575.9341, 7589.2236, 7602.5132, 7615.8027, 7629.0923, 7642.3813, 7655.6709, 7668.9604, 7682.25, 7695.5396, 7708.8291, 7722.1187, 7735.4077, 7748.6973, 7761.9868, 7775.2764, 7788.5659, 7801.8555, 7815.1445, 7828.4341, 7841.7236, 7855.0132, 7868.3027, 7881.5923, 7894.8813, 7908.1709, 7921.4604, 7934.75, 7948.0396, 7961.3291, 7974.6187, 7987.9077, 8001.1973, 8014.4868, 8027.7764, 8041.0659, 8054.3555
@type int
@label Depth (ft)
@class other
@N_unique .
@N 6400
 
_@NOTES
 
=====northing=====

northing:  Northing                             {txt}Number of Observations
{hline 19}                         {hline 30}
                                            Total   Integers   Nonintegers
{c |}      {res}#                     {txt}Negative           {res}-         -          -
{txt}{c |}      {res}#           #         {txt}Zero               {res}-         -          -
{txt}{c |}  {res}#   #           #         {txt}Positive       {res} 6400      6400          -
{txt}{c |}  {res}#   #   #       #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#   #   #   #   #         {txt}Total          {res} 6400      6400          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}60840             89250                      6400
  (80 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 4}northing {c |}{res}      6400     74991.9    8762.577      60840      89250
@mean 74991.900
@sd  8762.577
@min     60840
@max     89250
@example0 60840
@histh .00003344, .00003344, .00005016, .00003344, .00005016, .00006688, .00003344, .00006688, .00003344, .00005016, .00001672, .00005016, .00003344, .00006688, .00001672, .00003344, .00001672, .00001672, .00003344, .00005016, .00005016, .00001672, .00006688, .00005016, .00003344, .00003344, .00001672, .00001672, .00003344, .00006688, .0000836, .00003344, .00005016
@histw 61213.816, 61961.449, 62709.078, 63456.711, 64951.973, 65699.602, 66447.234, 67194.867, 67942.5, 68690.133, 69437.766, 70185.398, 70933.023, 71680.656, 72428.289, 73175.922, 73923.555, 74671.188, 75418.813, 76166.445, 76914.078, 79156.977, 80652.234, 82147.5, 82895.133, 83642.766, 84390.398, 85138.023, 85885.656, 86633.289, 87380.922, 88128.555, 88876.188
@type long
@label Northing
@class other
@N_unique 80
@N 6400
 
_@NOTES
 
=====easting=====

easting:  Easting                               {txt}Number of Observations
{hline 17}                           {hline 30}
                                            Total   Integers   Nonintegers
{c |}      {res}#   #                 {txt}Negative           {res}-         -          -
{txt}{c |}      {res}#   #   #   #         {txt}Zero               {res}-         -          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Positive       {res} 6400      6400          -
{txt}{c |}  {res}#   #   #   #   #                        {txt}{hline 5}     {hline 5}      {hline 5}
{c |}  {res}#   #   #   #   #         {txt}Total          {res} 6400      6400          -
{txt}{c |}  {res}#   #   #   #   #         {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}29240             49610                      6400
  (80 unique values)

{txt}    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 5}easting {c |}{res}      6400    39619.03    5721.486      29240      49610
@mean 39619.025
@sd  5721.486
@min     29240
@max     49610
@example0 29240
@histh .00002332, .00004664, .00006996, .00002332, .00004664, .00004664, .00002332, .00004664, .00006996, .00004664, .00004664, .00004664, .00006996, .00004664, .00006996, .00009327, .00006996, .00011659, .00004664, .00002332, .00006996, .00002332, .00004664, .00006996, .00002332, .00011659, .00004664, .00002332, .00004664, .00002332, .00004664, .00004664, .00004664, .00006996, .00002332, .00006996
@histw 29508.025, 30044.078, 30580.131, 31116.184, 31652.236, 32188.289, 32724.342, 33260.395, 33796.449, 34332.5, 34868.551, 35404.605, 35940.656, 36476.711, 37012.762, 38084.867, 38620.922, 39693.027, 40229.078, 40765.133, 41301.184, 41837.238, 42373.289, 42909.344, 43445.395, 43981.449, 44517.5, 45053.551, 45589.605, 46125.656, 46661.711, 47197.762, 47733.816, 48269.867, 48805.922, 49341.973
@type long
@label Easting
@class other
@N_unique 80
@N 6400
 
_@NOTES
 
=====type=====

type:  Type of collection methods               {txt}Number of Observations
{hline 33}           {hline 30}
                                            Total   Integers   Nonintegers
{c |}          {res}#                 {txt}Negative           {res}-         -          -
{txt}{c |}          {res}#                 {txt}Zero               {res}-         -          -
{txt}{c |}          {res}#                 {txt}Positive       {res} 6400      6400          -
{txt}{c |}          {res}#                                {txt}{hline 5}     {hline 5}      {hline 5}
{c |}          {res}#                 {txt}Total          {res} 6400      6400          -
{txt}{c |}  {res}.   .   #                 {txt}Missing            {res}-
{txt}{c +}{hline 22}{col 45}{hline 5}
{res}1                     3                      6400
   (3 unique values)

      {txt}type is labeled and all values are documented in the label.

    Variable {c |}       Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 56}
{space 8}type {c |}{res}      6400    2.985469    .1401273          1          3
@mean     2.985
@sd     0.140
@min         1
@max         3
@values 1, 2, 3
@names "measured", "estimated", "interpolated"
@freq 17, 59, 6324
@type byte
@label Type of collection methods
@class category
@N_unique 3
@N 6400
 
_@NOTES
 
{txt}
{com}. 
. // noi profiler report
. // profiler off
. 
. exit, clear STATA
